// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube {
    float3 position;
    float3 velocity;
    float4 color;
};

RWStructuredBuffer<Cube> cubes;
float resolution;
float repetitions;

[numthreads(10, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float xPos = id.x / resolution;

    Cube cube = cubes[id.x];

    for (int i = 0; i < repetitions; i++) {
        float zPos = frac(sin(dot(float2(xPos, cube.position.z).xy, float2(12.9898, 78.233))) * 43758.5435) * 1;
        cube.position.z = zPos;

        float r = frac(sin(dot(float2(cube.color.r, cube.color.g).xy, float2(12.9898, 78.233))) * 43758.5435) * 1;
        float g = frac(sin(dot(float2(cube.color.g, cube.color.b).xy, float2(12.9898, 78.233))) * 43758.5435) * 1;
        float b = frac(sin(dot(float2(cube.color.b, cube.color.r).xy, float2(12.9898, 78.233))) * 43758.5435) * 1;

        cube.color = float4(r, g, b, 1.0);

        cubes[id.x] = cube;
    }
}

float rand(float2 co) {
    return(frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5435)) * 1;
}
